name: Secure CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 12 * * 1'  # Runs every Monday at 12 PM UTC

permissions:
  security-events: write
  actions: read
  contents: read

jobs:
  security-tests:
    name: Security Scans
    runs-on: ubuntu-latest
    continue-on-error: true  # Allow pipeline to continue even if security scan fails

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🚀 Remove Windows-Only Packages
        run: grep -v "pywin32" requirements.txt > fixed_requirements.txt  # Removes pywin32

      - name: 🛡️ Python Dependency Security Scan (Safety)
        run: |
          pip install safety
          safety check -r fixed_requirements.txt --full-report || true  # Allow failure

      - name: 🔍 Run Dependency Security Audit (pip-audit)
        run: |
          pip install --upgrade pip
          pip install pip-audit
          pip-audit --requirement fixed_requirements.txt --fix || true  # Auto-fix vulnerabilities

      - name: 🛠️ Auto-Fix Vulnerable Dependencies
        run: |
          pip install --upgrade -r fixed_requirements.txt
          pip freeze > fixed_requirements.txt  # Save the fixed dependencies

      - name: 🔑 Secret Scanning with GitLeaks
        uses: gitleaks/gitleaks-action@v2
        continue-on-error: true

  run-tests:
    name: Run Automated Tests
    needs: security-tests
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: 📦 Install Dependencies
        run: |
          pip install -r fixed_requirements.txt

      - name: 🧪 Run Tests with Pytest
        run: pytest test_app.py --maxfail=1 --disable-warnings -q || true  # Allow test failures

  container_scan:
    name: Scan Container & Secrets
    needs: run-tests
    runs-on: ubuntu-latest

    steps:
      - name: 🐳 Scan Docker Image for Vulnerabilities (Trivy)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          exit-code: "0"  # Allow scan to run without stopping CI/CD
          severity: "HIGH,CRITICAL"

      - name: 🔍 Scan for Secrets with TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: "./"
          base: "origin/main"

  deploy:
    name: Deploy to Kubernetes
    needs:
      - container_scan
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🚀 Set up Kind (Kubernetes in Docker)
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind
          kind create cluster --name ci-cluster
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/kubectl
          kubectl cluster-info

      - name: 🚀 Deploy to Kubernetes
        run: |
          kubectl config set-context --current --namespace=default
          kubectl apply -f deployment.yaml -f service.yaml || true  # Prevents failure
